import os
from dotenv import load_dotenv
import telebot
from sqlalchemy.orm import sessionmaker
from database import *

load_dotenv()

bot = telebot.TeleBot(os.getenv('TOKEN'))
engine = ENGINE
Session = sessionmaker(engine)
session = Session()

admins_arr = [1050696532]


def extract_arg(arg):
	return arg.split()[1:]


@bot.message_handler(commands=['start'])
def analyse(message):
	global admins_arr
	if message.text == "/start" and admins_arr.count(message.from_user.id) == 0:
		user = session.query(TeleusersAlanica).filter_by(teleid=message.from_user.id).first()
		if not user:
			user = TeleusersAlanica (
				teleid = message.from_user.id,
				username = message.from_user.username,
				f_name = message.from_user.first_name,
				l_name = message.from_user.last_name,
				language = message.from_user.language_code
			)
			session.add(user)
			session.commit()
			markup = telebot.types.ReplyKeyboardMarkup(row_width=2)
			markup.row("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã", "–ü—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π")
			markup.row("–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç", "–î—Ä—É–≥–æ–µ")
			markup.row('–ü–æ–º–æ—â—å –≤ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–∞ –ë–æ–ª–≥–∞—Ä–∏–∏, –í–µ–Ω–≥—Ä–∏–∏, –†—É–º—ã–Ω–∏–∏')
			markup.row('–ú–µ–∂–¥—É–Ω—ã—Ä–æ–¥–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã —é—Ä. –õ–∏—Ü–∞')
			markup.row('–ú–µ–∂–¥—É–Ω—ã—Ä–æ–¥–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã —Ñ–∏–∑. –õ–∏—Ü–∞')
			markup.row('–û–ø–ª–∞—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤ —É—Å–ª—É–≥ –∫–∞—Ä—Ç–∞–º–∏ visa, MC, UnionPay, paypal')
			markup.row('–ü–æ–º–æ—â—å –≤ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥—Ä–∞–Ω–ø–∞—Å–ø–æ—Ä—Ç–∞ –£–∫—Ä–∞–∏–Ω—ã –±–µ–∑ –≤—ã–µ–∑–¥–∞ –≤ –£–∫—Ä–∞–∏–Ω—É')
			markup.row('–£–∫—Ä–∞–∏–Ω–∞ (–ù–î–°)')
			inputName = bot.send_message(message.from_user.id, "Alanica –Ω–∞ —Å–≤—è–∑–∏!ü¶Ñ\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏–∑ –º–µ–Ω—é", reply_markup=markup)
			bot.register_next_step_handler(inputName, save_topic)
		else:
			markup = telebot.types.ReplyKeyboardMarkup(row_width=2)
			markup.row("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã", "–ü—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π")
			markup.row("–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç", "–î—Ä—É–≥–æ–µ")
			markup.row('–ü–æ–º–æ—â—å –≤ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–∞ –ë–æ–ª–≥–∞—Ä–∏–∏, –í–µ–Ω–≥—Ä–∏–∏, –†—É–º—ã–Ω–∏–∏')
			markup.row('–ú–µ–∂–¥—É–Ω—ã—Ä–æ–¥–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã —é—Ä. –õ–∏—Ü–∞')
			markup.row('–ú–µ–∂–¥—É–Ω—ã—Ä–æ–¥–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã —Ñ–∏–∑. –õ–∏—Ü–∞')
			markup.row('–û–ø–ª–∞—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤ —É—Å–ª—É–≥ –∫–∞—Ä—Ç–∞–º–∏ visa, MC, UnionPay, paypal')
			markup.row('–ü–æ–º–æ—â—å –≤ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥—Ä–∞–Ω–ø–∞—Å–ø–æ—Ä—Ç–∞ –£–∫—Ä–∞–∏–Ω—ã –±–µ–∑ –≤—ã–µ–∑–¥–∞ –≤ –£–∫—Ä–∞–∏–Ω—É')
			markup.row('–£–∫—Ä–∞–∏–Ω–∞ (–ù–î–°)')
			inputName = bot.send_message(message.from_user.id, "Alanica –Ω–∞ —Å–≤—è–∑–∏!ü¶Ñ\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏–∑ –º–µ–Ω—é", reply_markup=markup)
			bot.register_next_step_handler(inputName, save_topic)
	elif message.text == '/start' and admins_arr.count(message.from_user.id) == 1:
		user = session.query(TeleusersAlanica).filter_by(teleid=message.from_user.id).first()
		if not user:
			user = TeleusersAlanica (
				teleid = message.from_user.id,
				username = message.from_user.username,
				f_name = message.from_user.first_name,
				l_name = message.from_user.last_name,
				language = message.from_user.language_code,
			)
			session.add(user)
			session.commit()
			markup = telebot.types.ReplyKeyboardMarkup(row_width=2)
			markup.row("–û–∂–∏–¥–∞—é—â–∏–µ", "–ó–∞–≤–µ—Ä—à–∏—Ç—å")
			bot.send_message(message.from_user.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏!\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–û–∂–∏–¥–∞—é—â–∏–µ</b>, —á—Ç–æ –±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –æ–∂–∏–¥–∞—é—Ç –æ—Ç–≤–µ—Ç–∞.\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–ó–∞–≤–µ—Ä—à–∏—Ç—å</b>, —á—Ç–æ –±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä.', parse_mode='html', reply_markup=markup)
		else:
			markup = telebot.types.ReplyKeyboardMarkup(row_width=2)
			markup.row("–û–∂–∏–¥–∞—é—â–∏–µ", "–ó–∞–≤–µ—Ä—à–∏—Ç—å")
			bot.send_message(message.from_user.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏!\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–û–∂–∏–¥–∞—é—â–∏–µ</b>, —á—Ç–æ –±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –æ–∂–∏–¥–∞—é—Ç –æ—Ç–≤–µ—Ç–∞.\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–ó–∞–≤–µ—Ä—à–∏—Ç—å</b>, —á—Ç–æ –±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä.', parse_mode='html', reply_markup=markup)


def save_topic(message):
	try:
		inputName = bot.send_message(message.from_user.id, "–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å –º—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –ø–æ–º–æ—á—åü¶Ñ")
		bot.register_next_step_handler(inputName, your_questioin)
		session.query(TeleusersAlanica).filter(TeleusersAlanica.teleid == message.from_user.id).update({'topic': message.text})
		session.commit()
	except Exception:
		markup = telebot.types.ReplyKeyboardMarkup(row_width=2)
		markup.row("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã", "–ü—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π")
		markup.row("–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç", "–î—Ä—É–≥–æ–µ")
		markup.row('–ü–æ–º–æ—â—å –≤ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–∞ –ë–æ–ª–≥–∞—Ä–∏–∏, –í–µ–Ω–≥—Ä–∏–∏, –†—É–º—ã–Ω–∏–∏')
		markup.row('–ú–µ–∂–¥—É–Ω—ã—Ä–æ–¥–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã —é—Ä. –õ–∏—Ü–∞')
		markup.row('–ú–µ–∂–¥—É–Ω—ã—Ä–æ–¥–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã —Ñ–∏–∑. –õ–∏—Ü–∞')
		markup.row('–û–ø–ª–∞—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤ —É—Å–ª—É–≥ –∫–∞—Ä—Ç–∞–º–∏ visa, MC, UnionPay, paypal')
		markup.row('–ü–æ–º–æ—â—å –≤ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥—Ä–∞–Ω–ø–∞—Å–ø–æ—Ä—Ç–∞ –£–∫—Ä–∞–∏–Ω—ã –±–µ–∑ –≤—ã–µ–∑–¥–∞ –≤ –£–∫—Ä–∞–∏–Ω—É')
		markup.row('–£–∫—Ä–∞–∏–Ω–∞ (–ù–î–°)')
		bot.send_message(message.from_user.id, 'Alanica –Ω–∞ —Å–≤—è–∑–∏!ü¶Ñ\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏–∑ –º–µ–Ω—é', parse_mode='html', reply_markup=markup)


def your_questioin(message):
	global admins_arr
	markup = telebot.types.InlineKeyboardMarkup(row_width=1)
	activate = telebot.types.InlineKeyboardButton(text="‚úÖ–ù–∞—á–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä‚úÖ", callback_data=f"select{message.from_user.id}")
	markup.add(activate)
	if message.from_user.id != None and message.text != "/start":
		user = session.query(TeleusersAlanica).filter_by(teleid=message.from_user.id).first()
		user.status = 'active'
		session.commit()
	else:
		inputName = bot.send_message(message.from_user.id, "–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∞–º –ø–æ–º–æ–∂–µ–ºü¶Ñ")
		bot.register_next_step_handler(inputName, your_questioin)
	user = session.query(TeleusersAlanica).filter_by(teleid=message.from_user.id).first()
	if user.question != '0':
		user.question += f'\n {message.text}'
	else:
		user.question = f'{message.text}'
	
	msg = ''
	for admin in admins_arr:
		msg =  f'<b>üìáID:</b> <a href=\'tg://user?id={user.teleid}\'>{user.teleid}</a>\n'
		msg += f'<b>üòé–ò–º—è: </b>{user.f_name}\n'
		msg += f'<b>üí´–¢–µ–º–∞: </b>{user.topic}\n'
		msg += f'<b>üìù–í–æ–ø—Ä–æ—Å: </b>{user.question}'
		markup_select = telebot.types.InlineKeyboardMarkup(row_width=1)
		activate = telebot.types.InlineKeyboardButton(text="‚úÖ–ü–æ–º–æ—á—å‚úÖ", callback_data=f"select{user.teleid}")
		markup_select.add(activate)
		bot.send_message(admin, "{0}".format(msg), reply_markup=markup_select, parse_mode='html')
	bot.send_message(message.from_user.id, "–°–ø–∞—Å–∏–±–æ, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏ –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏.")
	session.commit()


@bot.message_handler(content_types=["photo"])
def photo_sending(message):
	try:
		user = session.query(TeleusersAlanica).filter_by(teleid=message.from_user.id).first()
		if user:
			if (user.status == "busy" or user.status == "in_progress") and user.chat != "123":
				fileID = message.photo[-1].file_id
				file_info = bot.get_file(fileID)
				downloaded_file = bot.download_file(file_info.file_path)
				bot.send_photo(user.chat, downloaded_file)
	except Exception:
		pass

@bot.message_handler(content_types=['video'])
def sending_video(message):
	try:
		user = session.query(TeleusersAlanica).filter_by(teleid=message.from_user.id).first()
		if (user.status == "busy" or user.status == "in_progress") and user.chat != "123":
			fileID = message.video.file_id
			file_info = bot.get_file(fileID)
			downloaded_file = bot.download_file(file_info.file_path)
			bot.send_video(user.chat, downloaded_file, timeout=1000)
	except Exception:
		pass

@bot.message_handler(content_types=['document'])
def sending_document(message):
	try:
		user = session.query(TeleusersAlanica).filter_by(teleid=message.from_user.id).first()
		if (user.status == "busy" or user.status == "in_progress") and user.chat != "123":
			fileID = message.document.file_id
			file_info = bot.get_file(fileID)
			downloaded_file = bot.download_file(file_info.file_path)
			bot.send_document(user.chat, downloaded_file, timeout=1000)
	except Exception:
		pass

@bot.message_handler(content_types=['location'])
def sending_message(message):
	try:
		user = session.query(TeleusersAlanica).filter_by(teleid=message.from_user.id).first()
		if (user.status == "busy" or user.status == "in_progress") and user.chat != "123":
			fileID = message.location
			bot.send_message(user.chat, "longitude:{0}\nlatitude:{1}".format(fileID.longitude, fileID.latitude))
	except Exception:
		pass

@bot.message_handler(content_types=['sticker'])
def sticker_sending(message):
	try:
		user = session.query(TeleusersAlanica).filter_by(teleid=message.from_user.id).first()
		if (user.status == "busy" or user.status == "in_progress") and user.chat != "123":
			bot.send_sticker(user.chat, message.sticker.file_id)
	except Exception:
		pass


@bot.message_handler(content_types=['text'])
def answer_owner(message):
	global admins_arr
	user = session.query(TeleusersAlanica).filter_by(teleid=message.from_user.id).first()
	message_collect_id = ""
	if (user.status == "busy" or user.status == "in_progress") and message_collect_id == "" and message.text != "–ó–∞–≤–µ—Ä—à–∏—Ç—å" and message.text != "–û–∂–∏–¥–∞—é—â–∏–µ":
		bot.send_message(user.chat, '{0}'.format(message.text))
	if 1==1:
		if message.text == "–û–∂–∏–¥–∞—é—â–∏–µ" and admins_arr.count(message.from_user.id) != 0:
			user_info = session.query(TeleusersAlanica).filter_by(status='active').all()
			msg = ''
			if len(user_info) != 0:
				for item in user_info:
					topic_get = item.topic
					if topic_get == '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã' or topic_get == '–ü—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π' or topic_get == '–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç' or topic_get == '–î—Ä—É–≥–æ–µ':
						msg =  f'<b>üìáID:</b> <a href=\'tg://user?id={item.teleid}\'>{item.teleid}</a>\n'
						msg += f'<b>üòé–ò–º—è: </b>{item.f_name}\n'
						msg += f'<b>üí´–¢–µ–º–∞: </b>{item.topic}\n'
						msg += f'<b>üìù–í–æ–ø—Ä–æ—Å: </b>{item.question}'
						markup_select = telebot.types.InlineKeyboardMarkup(row_width=1)
						activate = telebot.types.InlineKeyboardButton(text="‚úÖ–ü–æ–º–æ—á—å‚úÖ", callback_data=f"select{item.teleid}")
						markup_select.add(activate)
						bot.send_message(message.from_user.id, "{0}".format(msg), reply_markup=markup_select, parse_mode='html')
			else:
				bot.send_message(message.from_user.id, "–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã".format(msg))
		elif message.text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å" and admins_arr.count(message.from_user.id) != 0:
			active_user = session.query(TeleusersAlanica).filter_by(teleid=user.chat).first()
			active_user.chat = '123'
			active_user.status = 'not_actual'
			active_user.question = '0'
			active_user.topic = '0'
			markup = telebot.types.ReplyKeyboardMarkup(row_width=2)
			markup.row("–û–∂–∏–¥–∞—é—â–∏–µ", "–ó–∞–≤–µ—Ä—à–∏—Ç—å")
			try:
				bot.send_message(user.chat, "–ë—ã–ª–æ –ø—Ä–∏—è—Ç–Ω–æ —Å –≤–∞–º–∏ –æ–±—â–∞—Ç—Å—èüíö!\n–ñ–µ–ª–∞–µ–º –Ω–∞–∏–ª—É—á—à–µ–≥–æ –¥–Ω—è!\n–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ .üí™\n\n–ö–∞–∫ —Ç–æ–ª—å–∫–æ –≤–æ–∑–Ω–∏–∫–Ω–µ—Ç –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å,\n–∂–º–∏—Ç–µ –Ω–∞ /start".format(message.from_user.first_name), parse_mode="html")
				bot.send_message(message.from_user.id, "–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!", parse_mode="html", reply_markup=markup)
				user.status = 'free'
				user.chat = '123'
				session.commit()
			except Exception:
				bot.send_message(message.from_user.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤!", parse_mode="html", reply_markup=markup)
		if user.status == "active" and message.text != "–ó–∞–≤–µ—Ä—à–∏—Ç—å" and message.text != "–û–∂–∏–¥–∞—é—â–∏–µ":
			if user.question != '0':
				user.question += f'\n {message.text}'
			else:
				user.question = f'{message.text}'
			session.commit()
			for item in admins_arr:
				bot.send_message(item, "<b>üíö{0}:</b> \nüì¨{1}".format(message.from_user.first_name, message.text), parse_mode="html")


@bot.callback_query_handler(func=lambda call:True)
def start_conversation(call):
	global admins_arr
	if call.data[:6] == 'select':
		ask_user_id = call.data[6:]
		user = session.query(TeleusersAlanica).filter_by(teleid=ask_user_id).first()
		admin = session.query(TeleusersAlanica).filter_by(teleid=call.message.chat.id).first()
		if user.status == 'active':
			admin.status = 'busy'
			admin.chat = user.teleid
			user.status = 'in_progress'
			user.chat = admin.teleid
			session.commit()
			for item in admins_arr:
				bot.send_message(item, f"<a href=\'tg://user?id={user.teleid}\'><b>üíö{user.teleid}:</b></a> \nüì¨–†–∞–∑–≥–æ–≤–æ—Ä –Ω–∞—á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º <a href=\'tg://user?id={ask_user_id}\'>{ask_user_id}</a>!", parse_mode="html")
			if user.f_name != '0':
				bot.send_message(ask_user_id, "–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {0}! –ú–µ–Ω—è –∑–æ–≤—É—Ç –î–º–∏—Ç—Ä–∏–π, —Å–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ .üí™".format(user.f_name), parse_mode="html")
			else:
				bot.send_message(int(ask_user_id), "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ú–µ–Ω—è –∑–æ–≤—É—Ç –î–º–∏—Ç—Ä–∏–π, —Å–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ .üí™", parse_mode="html")
		elif user.status == 'not_actual':
			bot.delete_message(call.message.chat.id, call.message.message_id)
			bot.send_message(call.message.chat.id, f'–†–∞–∑–≥–æ–≤–æ—Ä —É–∂–µ –Ω–µ –∞–∫—Ç—É–∞–ª–µ–Ω –∏ –∑–∞–≤–µ—Ä—à–µ–Ω', parse_mode='html')
		elif user.status == 'in_progress':
			admin_active = user.chat
			bot.delete_message(call.message.chat.id, call.message.message_id)
			bot.send_message(call.message.chat.id, f'üí™–†–∞–∑–≥–æ–≤–æ—Ä —É–∂–µ –≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –∏ –Ω–∞—á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: <a href=\'tg://user?id={admin_active}\'>{admin_active}</a>', parse_mode='html')


while 1:
	try:
		bot.polling() 
	except Exception as e:
		print(e)
		os.system('python bot.py')